<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>호구마츄로그</title><description>반갑습니다.
iOS 개발자 호구마츄입니다.</description><link>https://hogumachu.github.io/</link><language>ko</language><lastBuildDate>Mon, 12 Jun 2023 12:26:36 +0000</lastBuildDate><pubDate>Mon, 12 Jun 2023 12:26:36 +0000</pubDate><ttl>250</ttl><atom:link href="https://hogumachu.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hogumachu.github.io/articles/protocol</guid><title>Protocol</title><description>Protocol이 무엇인지 알아보자</description><link>https://hogumachu.github.io/articles/protocol</link><pubDate>Sun, 11 Jun 2023 21:30:00 +0000</pubDate><content:encoded><![CDATA[<h1>Protocol</h1><pre><code>프로토콜은 해당 (프로토콜을 준수하는) 타입이 구현해야 하는 요구 사항을 정의한다.

즉 프로토콜은 청사진이다.
</code></pre><p>프로토콜에 대한 구현은 채택한 곳에서 한다. (프로토콜 자체 Extension을 사용하여 구현할 수도 있음)</p><h2>왜 사용할까 ?</h2><b>재사용</b><p>을 하기 위해서 사용한다고 생각한다.</p><p>프로토콜을 이용하지 않으면 추후 코드가 변경될 때 꽤나 많은 코드를 변경해야 하는 일이 발생할 수 있다.</p><h2>예시</h2><pre><code><span class="keyword">final class</span> UserRepository {
    <span class="keyword">func</span> fetchUserList() -&gt; [<span class="type">User</span>] {
        <span class="comment">// 생략</span>
    }
}

<span class="keyword">final class</span> SomeViewModel {
    <span class="keyword">let</span> userRepository: <span class="type">UserRepository</span>
    
    <span class="keyword">private func</span> fetchUserList() {
        userRepository.<span class="property">fetchUserList</span>
        <span class="comment">// 생략</span>
    }
}
</code></pre><p>만약 위의 코드에서 <code>UserRepository</code>의 내부가 <code>CoreData</code> 에서 <code>Realm</code> 으로 변경이 된다면?</p><p><code>UserRepository</code>의 코드를 변경을 해야 한다. (다시 또 <code>CoreData</code> 로 변경해야 한다면..?)</p><p>그 외에도 <code>SomeViewModel</code> 을 테스트하기 위해서는 어떻게 해야 할까?</p><p>Repository 를 통해 데이터베이스 또는 네트워크를 이용해서 <b>실제 데이터를 반영을 해야 한다</b>.</p><h2>프로토콜 사용 예시</h2><pre><code><span class="keyword">protocol</span> UserRepository: <span class="type">AnyObject</span> {
    <span class="keyword">func</span> fetchUserList() -&gt; [<span class="type">User</span>]
}

<span class="keyword">final class</span> RealmUserRepository: <span class="type">UserRepository</span> {
    <span class="keyword">func</span> fetchUserList() -&gt; [<span class="type">User</span>] {
        <span class="comment">// 생략</span>
    }
}
</code></pre><p>일단 먼저 프로토콜을 생성한다.</p><p>그 다음으로 해당 프로토콜을 준수하는 객체를 생성한다.</p><pre><code><span class="keyword">final class</span> SomeViewModel {
    <span class="keyword">let</span> userRepository: <span class="type">UserRepository</span>
    
    <span class="keyword">private func</span> fetchUserList() {
        userRepository.<span class="property">fetchUserList</span>
        <span class="comment">// 생략</span>
    }
}
</code></pre><p><code>SomeViewModel</code>에서 있는 <code>UserRepository</code> 는 ViewModel은 어떤 것인지 모른다.</p><p>그냥 해당 <b>프로토콜을 준수하는 타입이 들어와서 알아서 잘하겠지</b>라고 생각할 것이다.</p><pre><code><span class="keyword">final class</span> MockUserRepository: <span class="type">UserRepository</span> {
    <span class="keyword">func</span> fetchUserList() -&gt; [<span class="type">User</span>] {
        <span class="keyword">let</span> mockUserList: [<span class="type">User</span>] = <span class="comment">// 생략</span>
        <span class="keyword">return</span> mockUserList
    }
}

<span class="keyword">let</span> repository = <span class="type">MockUserRepository</span>()
<span class="keyword">let</span> viewModel = <span class="type">SomeViewModel</span>(userRepository: repository)
</code></pre><p>이처럼 테스트를 하기 위한 Repository를 만들어서 ViewModel에 의존성을 주입할 수 있다.</p><p>그냥 프로토콜을 준수하기만 하면 된다.</p><h2>결론</h2><b>(지극히 개인적인 생각입니다)</b><p>✔️ 나중에 코드를 쉽게 변경하기 위해 쓴다.</p><p>✔️ 그 쉽게 변경한다는 것은 테스트하기 위해 변경하는 것도 포함이다.</p><p>✔️ 서로 간의 의존성을 낮출 수 있다. (Protocol을 사용하여 추상화)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hogumachu.github.io/articles/generic</guid><title>Generic</title><description>Generic이 무엇인지 알아보자</description><link>https://hogumachu.github.io/articles/generic</link><pubDate>Sun, 11 Jun 2023 21:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Generic</h1><pre><code>여러 타입에 대해 동작하는 코드를 작성하고 해당 타입에 특정 요구 사항을 지정한다.
</code></pre><p>제네릭은 사용자가 정의한 요구 사항에 따라 모든 타입에서 작동할 수 있는 <b>재사용 가능</b>한 함수 및 타입이다.</p><h2>예시</h2><pre><code><span class="keyword">let</span> tableView = <span class="type">UITableView</span>()
tableView.<span class="call">register</span>(<span class="type">SomeTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"SomeTableViewCell"</span>)
</code></pre><p>위의 코드는 일반적으로 TableView의 Cell을 register 하는 코드이다.</p><p>만약 제네릭을 사용하지 않고 register를 간편하게 하고 싶다면</p><pre><code><span class="keyword">extension</span> <span class="type">UITableView</span> {
    <span class="keyword">func</span> registerSomeTableViewCell() {
        <span class="call">register</span>(<span class="type">SomeTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"SomeTableViewCell"</span>)
    }
}
</code></pre><p>이런 식으로 TableView에 Extension을 이용할 수 있다.</p><p>그러나 이렇게 구현하면 Cell의 종류가 추가될 때마다 extension에 새로운 코드를 추가해야 한다.</p><p>이럴 때 제네릭을 사용하면 된다.</p><h2>제네릭 사용 예시</h2><pre><code><span class="keyword">extension</span> <span class="type">UITableView</span> {
    <span class="keyword">func</span> register&lt;T: <span class="type">UITableViewCell</span>&gt;(<span class="keyword">_</span> cell: <span class="type">T</span>.<span class="type">Type</span>) {
        <span class="keyword">let</span> identifier = <span class="type">String</span>(describing: cell)
        <span class="call">register</span>(cell, forCellReuseIdentifier: identifier)
    }
}

tableView.<span class="call">register</span>(<span class="type">SomeTableViewCell</span>.<span class="keyword">self</span>)
</code></pre><p>UITableViewCell 을 만족하는 타입을 가져와 Identifier를 만들고 register 하는 코드이다.</p><pre><code><span class="keyword">extension</span> <span class="type">UITableView</span> {
    <span class="keyword">func</span> dequeueCell&lt;T: <span class="type">UICollectionViewCell</span>&gt;(<span class="keyword">_</span> cell: <span class="type">T</span>.<span class="type">Type</span>, for indexPath: <span class="type">IndexPath</span>) -&gt; <span class="type">T</span>? {
        <span class="keyword">let</span> identifier = <span class="type">String</span>(describing: cell)
        <span class="keyword">return</span> <span class="call">dequeueReusableCell</span>(withReuseIdentifier: identifier, for: indexPath) <span class="keyword">as</span>? <span class="type">T</span>
    }
}
</code></pre><p>동일한 방식으로 Cell을 dequeue 하는 것도 제네릭으로 만들 수 있다.</p><h2>결론</h2><p>✔️ 제네릭을 이용해 <b>재사용 가능한 코드</b>를 작성할 수 있다.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hogumachu.github.io/articles/mvc_mvvm</guid><title>MVC, MVVM</title><description>MVC, MVVM 아키텍처 정리</description><link>https://hogumachu.github.io/articles/mvc_mvvm</link><pubDate>Fri, 9 Jun 2023 17:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>MVC</h1><center><img src="https://github.com/hogumachu/hogumachu.github.io/assets/74225754/54d2cb16-556e-4f2f-baed-8d70f9a6d7b3" width="90%" height="90%"></center><p>✔️ <b>Model-ViewController</b></p><p>✔️ 매우 단순한 구조로 처음 개발할 때 사용 (초보자가 이용하기 좋음)</p><h3>Model</h3><p>✔️ 데이터 모델, 비즈니스 로직</p><h3>View</h3><p>✔️ View, View의 이벤트를 컨트롤러로 보냄</p><h3>Controller</h3><p>✔️ Model과 View의 기능을 제외한 모든 기능</p><h3>단점</h3><p>✔️ <b>ViewController가 하는 일이 많다.</b> (Massive ViewController)</p><p>✔️ View와 여러 로직이 밀접한 관계가 있기 때문에 UI 테스트를 하기 어렵다.</p><p>✔️ 위와 동일한 문제로 여러 로직을 테스트하기 어렵다.</p><h1>MVVM</h1><center><img src="https://github.com/hogumachu/hogumachu.github.io/assets/74225754/fce8251b-9d7e-4150-8359-441fbba45aa3" width="90%" height="90%"></center><p>✔️ <b> Model-View-ViewModel</b></p><h3>Model</h3><p>✔️ 데이터 모델, 비즈니스 로직</p><h3>View(Controller)</h3><p>✔️ View의 역할 (화면 업데이트, 사용자 상호 작용)</p><h3>ViewModel</h3><p>✔️ View의 Input을 처리하여 Output을 만든다.</p><p>✔️ Model을 가공하여 View를 업데이트 (데이터 바인딩)</p><h3>장점</h3><p>✔️ View가 UI에 대한 행동만 한다. (UI 테스트 가능)</p><p>✔️ ViewModel이 기타 로직을 담당한다. (Unit 테스트 가능)</p><h3>단점</h3><p>✔️ <b>ViewModel이 하는 일이 많다.</b> (Massive ViewModel)</p><h3>해결 방법</h3><p>✔️ ViewModel을 가볍게 만들자.</p><p>✔️ ViewModel의 역할을 여러 개로 쪼갬 (MVVM-C 등)</p><p>✔️ <b>그러나 결국 역할을 쪼개다 보면 RIBs 같은 아키텍처가 되는 것이 아닌가...</b></p>]]></content:encoded></item><item><guid isPermaLink="true">https://hogumachu.github.io/articles/tech_interview</guid><title>기술 면접 준비 iOS</title><description>iOS 기술 면접 예상 질문들</description><link>https://hogumachu.github.io/articles/tech_interview</link><pubDate>Wed, 17 May 2023 15:15:00 +0000</pubDate><content:encoded><![CDATA[<h3>일반</h3><p>✔️ iOS 개발자를 선택한 이유</p><p>✔️ Swift의 장점 및 단점</p><p>✔️ 저장 프로퍼티 &amp; 연산 프로퍼티</p><p>✔️ Property Observer 설명</p><p>✔️ Closure 설명</p><p>✔️ @escaping Closure 설명</p><p>✔️ @propertyWrapper 설명</p><p>✔️ Generic 설명 (왜 사용?)</p><p>✔️ 함수형 프로그래밍 설명 (순수함수, 고차함수, 일급객체)</p><p>✔️ @main 설명</p><p>✔️ Value type vs. Reference type</p><p>✔️ instace vs. class vs. static (method &amp; property)</p><p>✔️ ARC (Automatic Reference Counting) 설명</p><p>✔️ Static 설명 (왜 사용?)</p><p>✔️ Lazy 설명 (왜 사용?)</p><p>✔️ COW (Copy-On-Write) 설명</p><p>✔️ Access Level 설명 (종류마다 차이점)</p><p>✔️ final 설명</p><p>✔️ mutating 설명</p><p>✔️ class 성능 향상 방법</p><p>✔️ Stoaryboard vs. Code base</p><p>✔️ KVO 설명</p><p>✔️ Delegate vs. Notification</p><p>✔️ String을 subscript로 접근할 수 없는 이유 설명</p><p>✔️ Library &amp; Framework 설명</p><p>✔️ Static &amp; Dynamic (Library, Framework) 설명</p><p>✔️ Run Loop 설명</p><p>✔️ Bundle &amp; Package 설명</p><p>✔️ Codable 설명</p><p>✔️ App thining 설명</p><h3>Protocol</h3><p>✔️ Protocl 설명</p><p>✔️ Extension 설명 (override 가능?)</p><p>✔️ POP (Protocol Oriented Programming) 설명</p><h3>UI</h3><p>✔️ CALayer 설명</p><p>✔️ UINavigationController 역할</p><p>✔️ StackView 장단점</p><p>✔️ frame vs. bounds</p><p>✔️ Intrinsic Size 설명</p><p>✔️ hugging &amp; resistance 설명</p><p>✔️ sedNeedsLayout &amp; layoutIfNeeded &amp; layoutSubviews 설명</p><p>✔️ Drawing Cycle 설명</p><p>✔️ UIWindow 설명</p><h3>Thread</h3><p>✔️ GCD (Grand Central Dispatch) 설명</p><p>✔️ QoS (Quality of Service) 설명</p><p>✔️ Main Thread에서만 UI를 작업할 수 있는 이유</p><h3>Method Dispatch</h3><p>✔️ Method Dispatch (Static &amp; Dynamic) 설명</p><p>✔️ Existential Container 설명</p><p>✔️ Method Inlining 설명</p><p>✔️ Method Swizzling 설명</p><h3>Life Cycle</h3><p>✔️ ViewController Life Cycle 설명</p><p>✔️ App Life Cycle 설명</p><p>✔️ Scene Life Cycle 설명</p><h3>RxSwift</h3><p>✔️ RxSwift 설명</p><p>✔️ Hot Observable &amp; Cold Observable</p><p>✔️ Subject 설명</p><p>✔️ Bind vs. Drive</p><p>✔️ Traits (Single, Completable, Maybe) 설명</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hogumachu.github.io/articles/arc</guid><title>ARC</title><description>Swift에서 메모리 관리를 위해 사용하는 ARC</description><link>https://hogumachu.github.io/articles/arc</link><pubDate>Tue, 16 May 2023 18:15:00 +0000</pubDate><content:encoded><![CDATA[<h1>ARC</h1><pre><code><span class="type">Automatic Reference Counting</span> - 자동 참조 카운팅
</code></pre><p>✔️ <b>Swift에서 제공하는 메모리 관리</b></p><p>✔️ <b>Reference에 대한 참조 횟수</b>를 자동으로 관리해줌</p><p>✔️ 컴파일할 때 retain/release코드를 작성해줌</p><p>✔️ 참조할 때 Reference Count를 증가시키고 참조하지 않을 때 Reference Count를 감소시킴</p><p>✔️ Reference Count가 0이 되면 메모리에서 해제함</p><h2>Strong Reference Cycle</h2><p>✔️ <b>강한 참조 사이클</b></p><p>✔️ 메모리가 해제되어야 하는 상황인데 서로 참조를 하고 있어 Reference Count가 0이 되지 않는 상황</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">class</span> Human {
    <span class="keyword">var</span> device: <span class="type">Device</span>?
    
    <span class="keyword">init</span>(device: <span class="type">Device</span>? = <span class="keyword">nil</span>) {
        <span class="keyword">self</span>.<span class="property">device</span> = device
    }
}


<span class="keyword">class</span> Device {
    <span class="keyword">var</span> owner: <span class="type">Human</span>?
    
    <span class="keyword">init</span>(owner: <span class="type">Human</span>? = <span class="keyword">nil</span>) {
        <span class="keyword">self</span>.<span class="property">owner</span> = owner
    }
}

<span class="keyword">var</span> human: <span class="type">Human</span>? = <span class="type">Human</span>() <span class="comment">// RC = 1</span>
<span class="keyword">var</span> device: <span class="type">Device</span>? = <span class="type">Device</span>() <span class="comment">// RC = 1</span>
human?.<span class="property">device</span> = device <span class="comment">// RC = 2</span>
device?.<span class="property">owner</span> = human <span class="comment">// RC = 2</span>

human = <span class="keyword">nil</span> <span class="comment">// RC = 1</span>
device = <span class="keyword">nil</span> <span class="comment">// RC = 1</span>
</code></pre><p>✔️ 예시처럼 서로가 서로를 참조하고 있을 때는 메모리에 계속 남아있음</p><p>✔️ 위와 같은 상황이 반복되면 접근할 수 없는 객체가 많아지고 메모리 부족을 야기할 수 있음</p><h2>해결 방법</h2><p>✔️ <b>미소유 참조</b> 또는 <b>약한 참조</b>를 사용하면 Reference Count를 증가시키지 않기 때문에 위의 문제를 해결할 수 있음</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">class</span> Human {
    <span class="keyword">unowned var</span> device: <span class="type">Device</span>?
    
    <span class="keyword">init</span>(device: <span class="type">Device</span>? = <span class="keyword">nil</span>) {
        <span class="keyword">self</span>.<span class="property">device</span> = device
    }
}


<span class="keyword">class</span> Device {
    <span class="keyword">weak var</span> owner: <span class="type">Human</span>?
    
    <span class="keyword">init</span>(owner: <span class="type">Human</span>? = <span class="keyword">nil</span>) {
        <span class="keyword">self</span>.<span class="property">owner</span> = owner
    }
}

<span class="keyword">var</span> human: <span class="type">Human</span>? = <span class="type">Human</span>() <span class="comment">// RC = 1</span>
<span class="keyword">var</span> device: <span class="type">Device</span>? = <span class="type">Device</span>() <span class="comment">// RC = 1</span>
human?.<span class="property">device</span> = device <span class="comment">// 변화 없음</span>
device?.<span class="property">owner</span> = human <span class="comment">// 변화 없음</span>

human = <span class="keyword">nil</span> <span class="comment">// RC = 0</span>
device = <span class="keyword">nil</span> <span class="comment">// RC = 0</span>
</code></pre><h3>unowned - 미소유 참조</h3><p>✔️ Reference Count를 증가시키지 않고 있는 그대로 값을 가져옴</p><b>장점</b><p>: 옵셔널 체이닝을 하지 않고 값을 가져올 수 있음</p><b>단점</b><p>: 만약 메모리에서 해제된 값을 참조하게 되면 앱이 강제 종료 (치명적)</p><h3>weak - 약한 참조</h3><p>✔️ Reference Count를 증가시키지 않고 Optional로 값을 가져옴</p><b>장점</b><p>: 값이 해제되었을 때 nil 로 받기 때문에 안전함</p><b>단점</b><p>: 옵셔널 체이닝을 해야 하기 때문에 코드 길이가 늘어남</p><pre><code><span class="keyword">func</span> weakMethod() {
    <span class="call">doSomething</span> { [<span class="keyword">weak self</span>] <span class="keyword">_ in
        guard let self else</span> { <span class="keyword">return</span> }
        <span class="keyword">self</span>.<span class="call">doAnything</span>()
    }
}

<span class="keyword">func</span> unownedMethod() {
    <span class="call">doSomething</span> { [<span class="keyword">unowned self</span>] <span class="keyword">_ in
        self</span>.<span class="call">doAnything</span>()
    }
}
</code></pre><h2>🤔</h2><b>weak참조는 옵셔널 체이닝을 위한 코드 1줄만 들어가면 되는데 굳이 unowned가 있는 이유가 있을까</b>]]></content:encoded></item></channel></rss>